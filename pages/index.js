import Head from 'next/head'
import { useEffect, useState } from 'react'
import { useDispatch, useSelector, } from 'react-redux'
import Link from 'next/link'
import AuthForm from '../components/auth/AuthForm'
import { useHttpClient } from '../hooks/httpClient'
import styles from '../styles/Home.module.css'
import ErrorModal from '../components/UI/ErrorModal'
import ProductsList from '../components/products/ProductsList'
import { cartActions } from '../store/cart'
import PageBar from '../components/pagination/PageBar'
import SearchBar from '../components/products/SearchBar'
const PRODUCTSURL = 'http://localhost:5000/api/v1/products'
const SEARCHURL = 'http://localhost:5000/api/v1/products/search?'
const CARTURL = 'http://localhost:5000/api/v1/cart'

export default function Home() {
  const [products, setProducts] = useState([])
  const [count, setCount] = useState(0)
  const [pages, setPages] = useState(1)
  const [currentPage, setCurrentPage] = useState(1)
  const [pageLimit, setPageLimit] = useState(10)
  const [pageDirection, setPageDirection] = useState('asc')
  const [orderBy, setOrderBy] = useState('n')
  const [addingCart, setAddingCart] = useState(false)
  const [searchMode, setSearchMode] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const { isLoading, error, sendRequest, clearError } = useHttpClient()
  const isAuthenticated = useSelector(state => state.auth.isAuthenticated)
  const token = useSelector(state => state.auth.token)
  const user = useSelector(state => state.auth.user)
  const cartCount = useSelector(state => state.cart.cartCount)
  const dispatch = useDispatch()

  useEffect(() => {
    if (isAuthenticated && token) {
      if (!searchMode) {
        const getData = async () => {
          const data = await sendRequest(PRODUCTSURL+ `?page=${currentPage}&limit=${pageLimit}&direction=${pageDirection}&orderBy=${orderBy}`, 'GET', null, {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          })
          return data
        }
        getData().then(data => {
          setProducts(data.data)
          setCount(data.count)
          setPages(Math.ceil(parseInt(data.count)/pageLimit))
        })
      } else {
        const getData = async () => {
          const data = await sendRequest(SEARCHURL+ `q=${searchTerm}&page=${currentPage}&limit=${pageLimit}&direction=${pageDirection}&orderBy=${orderBy}`, 'GET', null, {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          })
          return data
        }
        getData().then(data => {
          setProducts(data.data)
          setCount(data.count)
          setPages(Math.ceil(parseInt(data.count) / pageLimit))
          setSearchTerm('')
        })
      }
      
    }
  }, [isAuthenticated, token, currentPage, pageLimit, pageDirection, orderBy, searchMode])

  useEffect(() => {
    if (isAuthenticated && token) {
      const getData = async () => {
        const data = await sendRequest(CARTURL, 'GET', null, {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        })
        return data
      }
      getData().then(data => {
        const count = data.data.reduce((acc, el) => {
          return acc + parseInt(el.quantity)
        },0)
        dispatch(cartActions.setCartCount(count))
        dispatch(cartActions.setCart(data.data))
      })
    }
  }, [isAuthenticated, token, addingCart])

  const switchOrder = () => {
    if (orderBy === 'p') {
      setOrderBy('n')
    } else {
      setOrderBy('p')
    }
  }

  const switchDirection = () => {
    if (pageDirection === 'asc') {
      setPageDirection('desc')
    } else {
      setPageDirection('asc')
    }
  }

  const switchLimit = () => {
    if (pageLimit === 10) {
      setPageLimit(5)
      setCurrentPage(1)
    } else {
      setPageLimit(10)
      setCurrentPage(1)
    }
  }

  const switchSearchMode = () => {
    setSearchMode(false)
  }

  if (!isAuthenticated) {
    return <AuthForm />
  }


  if (isLoading) {
    return <p>loading...</p>
  }
  
  
  if (isAuthenticated && !isLoading) {
    return (
      <div className={styles.container}>
        <Head>
          <title>Welcome to our shop</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
  
        <main className={styles.main}>
        {error && (
          <ErrorModal
            message={error}
            onConfirm={clearError}
          />
        )}
          <h1>yeet</h1>
          <p>hi {user.user_name}, we have {count} products for you</p>
          <Link href={'cart'} >
            <a>you have {cartCount} products in your cart, see what's in there here</a>
          </Link>
          <SearchBar setSearchMode={setSearchMode} searchTerm={searchTerm} setSearchTerm={setSearchTerm} />
          {searchMode && <button onClick={switchSearchMode}>Go back to overview</button>}
          <button onClick={switchOrder}>Order  {orderBy === 'p' ? 'Alphabetically' : 'by price'}</button>
          <button onClick={switchDirection}>Display in {pageDirection === 'asc' ? 'descending' : 'ascending'} order</button>
          <button onClick={switchLimit}>Show {pageLimit === 10 ? '5' : '10'} products per page</button>
          <PageBar currentPage={currentPage} pages={pages} setCurrentPage={setCurrentPage} />
          <ProductsList setAddingCart={setAddingCart} products={products} />
        </main>
  
      </div>
    )
  }
  
}
